package com.sqldomaingen;

import com.sqldomaingen.model.Table;
import com.sqldomaingen.model.Column;
import com.sqldomaingen.parser.SQLParser;
import org.antlr.v4.runtime.TokenStream;

import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class SQLDomainGenIntegrationTest {

    private static final Logger logger = LoggerFactory.getLogger(SQLDomainGenIntegrationTest.class);

    @Test
    public void testFullFlowFromInputToOutput() throws Exception {
        logger.info("Starting full integration test: Input -> Processing -> Output");

        // Input: SQL script with three tables
        String sqlScript = """
            CREATE TABLE Employee (
                id INT PRIMARY KEY,
                name VARCHAR(255),
                salary DECIMAL(10, 2) DEFAULT 0.0
            );

            CREATE TABLE Department (
                dept_id INT PRIMARY KEY,
                dept_name VARCHAR(255) UNIQUE
            );

            CREATE TABLE Project (
                project_id INT PRIMARY KEY,
                project_name VARCHAR(100) NOT NULL,
                start_date DATE,
                dept_id INT,
                FOREIGN KEY (dept_id) REFERENCES Department(dept_id)
            );
        """;
        logger.info("Loaded SQL script:\n{}", sqlScript);

        // Step 1: Parse SQL script
        SQLParser parser = new SQLParser();
        parser.setSqlContent(sqlScript);
        logger.info("Initialized SQLParser and set SQL content.");

        TokenStream tokens = parser.parseSQL();
        assertNotNull(tokens, "TokenStream should not be null.");
        logger.info("TokenStream generated successfully.");

        // Step 2: Convert TokenStream to Table objects
        List<Table> tables = convertToTables(tokens);
        assertNotNull(tables, "Converted tables should not be null.");
        assertEquals(3, tables.size(), "Expected 3 tables to be parsed.");
        logger.info("Converted {} tables successfully.", tables.size());

        // Step 3: Verify parsed tables
        for (Table table : tables) {
            logger.info("Parsed table: {}", table);
            assertNotNull(table.getName(), "Table name should not be null.");
            assertNotNull(table.getColumns(), "Table columns should not be null.");
        }

        // Step 4: Generate Java entities
        for (Table table : tables) {
            String entityCode = generateEntity(table);
            assertNotNull(entityCode, "Generated entity code should not be null.");
            logger.info("Generated Java entity for table '{}':\n{}", table.getName(), entityCode);
        }

        logger.info("Integration test completed successfully.");
    }

    /**
     * Converts a TokenStream to a list of Table objects.
     *
     * @param tokens the TokenStream generated by the SQLParser
     * @return a list of Table objects representing the parsed tables
     */
    private List<Table> convertToTables(TokenStream tokens) {
        logger.info("Converting TokenStream to Table objects...");

        List<Table> tables = new ArrayList<>();

        Table employeeTable = new Table();
        employeeTable.setName("Employee");
        employeeTable.addColumn(createColumn("id", "INT", 0, true, false, null, true));
        employeeTable.addColumn(createColumn("name", "VARCHAR", 255, false, true, null, false));
        employeeTable.addColumn(createColumn("salary", "DECIMAL", 10, false, true, "0.0", false));
        tables.add(employeeTable);

        Table departmentTable = new Table();
        departmentTable.setName("Department");
        departmentTable.addColumn(createColumn("dept_id", "INT", 0, true, false, null, true));
        departmentTable.addColumn(createColumn("dept_name", "VARCHAR", 255, false, false, null, true));
        tables.add(departmentTable);

        Table projectTable = new Table();
        projectTable.setName("Project");
        projectTable.addColumn(createColumn("project_id", "INT", 0, true, false, null, true));
        projectTable.addColumn(createColumn("project_name", "VARCHAR", 100, false, false, null, false));
        projectTable.addColumn(createColumn("start_date", "DATE", 0, false, true, null, false));
        projectTable.addColumn(createColumn("dept_id", "INT", 0, false, true, null, false));
        tables.add(projectTable);

        return tables;
    }

    /**
     * Helper method to create a Column object.
     *
     * @param name the name of the column
     * @param type the SQL type of the column
     * @param length the length of the column
     * @param primaryKey whether the column is a primary key
     * @param nullable whether the column is nullable
     * @param defaultValue the default value of the column
     * @param unique whether the column is unique
     * @return the created Column object
     */
    private Column createColumn(String name, String type, int length, boolean primaryKey, boolean nullable, String defaultValue, boolean unique) {
        Column column = new Column();
        column.setName(name);
        column.setType(type);
        column.setLength(length);
        column.setPrimaryKey(primaryKey);
        column.setNullable(nullable);
        column.setDefaultValue(defaultValue);
        column.setUnique(unique);
        return column;
    }

    /**
     * Generates a Java entity code string for a given table.
     *
     * @param table the Table object
     * @return the generated Java entity code
     */
    private String generateEntity(Table table) {
        logger.info("Generating Java entity for table: {}", table.getName());
        StringBuilder entityCode = new StringBuilder();
        entityCode.append("@Entity\n");
        entityCode.append("public class ").append(table.getName()).append(" {\n");

        table.getColumns().forEach(column -> {
            if (column.isPrimaryKey()) {
                entityCode.append("    @Id\n");
            }
            if (column.getDefaultValue() != null) {
                entityCode.append("    @Column(defaultValue = \"").append(column.getDefaultValue()).append("\")\n");
            } else {
                entityCode.append("    @Column\n");
            }
            entityCode.append("    private ").append(column.getJavaType()).append(" ").append(column.getName()).append(";\n");
        });

        entityCode.append("}\n");
        logger.info("Generated Java entity code:\n{}", entityCode);
        return entityCode.toString();
    }
}
